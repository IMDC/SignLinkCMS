<?php


function strip_ext($filename) {
   // strip extension and get only video name
   $fnameonly = substr($filename, 0, strrpos($filename, '.')); 
   return $fnameonly;
}

/**
 *  Uses the gd image library to overlay a play button image defined by PLAYOVERLAY_IMAGE
 * onto the jpg thumbnail files generated by the make_video_thumbnail function
 *
 * @param string $videoPath  the full path to the video file including the trailing slash '/'
 * @param string $size  the size of a video thumbnail, WxH eg) 144x112 
 */
function createThumbnail($videoPath, $size="144x112") {
   // $videoPath is of the format "/nuitBlancheFiles/directoryname002/directoryname002.mp4"
   $fnameonly = strip_ext($videoPath);

   $newthumbjpg  = "/media" . $fnameonly . '.jpg';
   $tempthumbjpg = "/media" . $fnameonly . 'temp.jpg';

   // use ffmpeg to make a thumbnail from the first second of video
   $stringToExecuteRegular = "include/ffmpeg/ffmpeg -i " . "/media" . $videoPath . " -ss 1 -f image2 -vframes 1 -s " . $size . " " . $tempthumbjpg . " 2>&1";
   $output = shell_exec($stringToExecuteRegular);
	//print "<p>".$output."</p>";
	// use the newly created thumbnail
	$image = imagecreatefromjpeg($tempthumbjpg);
	
	if ( !$image ) {
      echo '<p>no image file created in overlay_play_btn</p>';
	}
	
	$pathToDefImage = 'images/play_btn.png';
   
   $watermark = imagecreatefrompng($pathToDefImage);
	
	if ( !$watermark ) {
	   echo "no watermark made, check the function";	
	}
	
	imagealphablending($image, true);
	imagealphablending($watermark, true); 
	
	// render play button .png file on top of thumb.jpg file
	imagecopy($image, $watermark, imagesx($image)/2-22, imagesy($image)/2-22, 0, 0, imagesx($watermark), imagesy($watermark));
	
	// create new thumbnail with play button overlayed on top in the same folder
	if ( !imagejpeg($image, $newthumbjpg) ) {
      print "**ERROR** - Error creating new thumbnail jpeg file, possibly check directory permissions";
	}
   
   unlink($tempthumbjpg);
	imagedestroy($image);
	imagedestroy($watermark);
}


?>
